/* global tw */
import React from 'react';
import PropTypes from 'prop-types';
import styled from 'react-emotion';
import { width as twWidth } from '../../tailwind';

const Wrapper = styled.svg`
  ${tw('stroke-current absolute')};
  color: ${props => props.stroke};
  width: ${props => props.svgWidth};
  fill: ${props => props.fill};
  left: ${props => props.left};
  top: ${props => props.top};
`;

const icons = {
  triangle: {
    shape: (
      <polygon
        strokeWidth="1px"
        strokeLinejoin="round"
        strokeMiterlimit="10"
        points="14.921,2.27 28.667,25.5 1.175,25.5 "
      />
    ),
    viewBox: '0 0 30 30',
  },
  circle: {
    shape: (
      <path d="M15,30A15,15,0,1,1,30,15,15,15,0,0,1,15,30ZM15,6.23A8.77,8.77,0,1,0,23.77,15,8.77,8.77,0,0,0,15,6.23Z" />
    ),
    viewBox: '0 0 30 30',
  },
  arrowUp: {
    shape: (
      <React.Fragment>
        <path d="M28.74,20.81H1.26a1.26,1.26,0,0,1-1-2L14.16.5a1.25,1.25,0,0,1,1-.5h0a1.24,1.24,0,0,1,1,.51L29.75,18.8a1.25,1.25,0,0,1-1,2ZM3.81,18.29H26.22L15.16,3.37Z" />{' '}
        <path d="M28.74,42H1.26a1.28,1.28,0,0,1-1.13-.71A1.26,1.26,0,0,1,.26,40l13.9-18.29a1.28,1.28,0,0,1,1-.5h0a1.24,1.24,0,0,1,1,.51L29.75,40a1.26,1.26,0,0,1,.12,1.32A1.28,1.28,0,0,1,28.74,42ZM3.81,39.47H26.22L15.16,24.55Z" />
      </React.Fragment>
    ),
    viewBox: '0 0 30 42',
  },
  upDown: {
    shape: (
      <React.Fragment>
        <path d="M28.74,44.58a1.28,1.28,0,0,1-1-.51L15.16,27.13l-12.89,17a1.26,1.26,0,1,1-2-1.53l13.9-18.29a1.34,1.34,0,0,1,1-.5,1.24,1.24,0,0,1,1,.51L29.75,42.56a1.27,1.27,0,0,1-1,2Z" />
        <path d="M14.83,20.82h0a1.28,1.28,0,0,1-1-.52L.25,2a1.27,1.27,0,0,1,2-1.51L14.84,17.45,27.73.5a1.26,1.26,0,0,1,2,1.53L15.84,20.32A1.28,1.28,0,0,1,14.83,20.82Z" />
      </React.Fragment>
    ),
    viewBox: '0 0 30 44.58',
  },
  box: {
    shape: (
      <path d="M28,2V28H2V2H28m.13-2H1.88A1.88,1.88,0,0,0,0,1.88V28.13A1.88,1.88,0,0,0,1.88,30H28.13A1.87,1.87,0,0,0,30,28.13V1.88A1.88,1.88,0,0,0,28.13,0Z" />
    ),
    viewBox: '0 0 30 30',
  },
  hexa: {
    shape: (
      <polygon
        strokeLinejoin="round"
        strokeMiterlimit="10"
        points="27.5,21.904 15,28.809  2.5,21.904 2.5,8.095 15,1.19 27.5,8.095 "
      />
    ),
    viewBox: '0 0 30 30',
  },
  merkabah: {
    shape: (
      <React.Fragment>
        <path d="M1.027,48.078 L84.427,95.548 L1.027,48.078 Z" id="Path" strokeDasharray="2.778,3" />
        <path d="M83.525,94.927 L166.125,48.081 L83.525,94.927 Z" id="Path" strokeDasharray="2.778,3" />
        <path d="M83.489,94.951 L83.489,191.014 L83.489,94.951 Z" id="Path" strokeDasharray="2.778,3" />
        <polygon id="Path" points="1.73 142.312 83.59 0.525 165.45 142.312" />
        <polygon id="Path" points="28.465 95.675 0.979 48.067 56.15 48.067" />
        <polygon id="Path" points="111.952 142.339 83.484 191.089 55.356 142.368" />
        <polygon id="Path" points="110.979 48.067 166.124 48.067 138.719 95.787" />
        <polygon id="Path" points="124.386 71.507 83.49 142.341 42.594 71.507" />
      </React.Fragment>
    ),
    viewBox: '0 0 167 192',
  },
  flowerOfLife: {
    shape: (
      <React.Fragment>
        <path
          d="M134.080627,45.8893775 C134.080627,69.8393775 114.664627,89.2553775 90.7176273,89.2553775 C66.7656273,89.2553775 47.3496273,69.8393775 47.3496273,45.8893775 C47.3496273,21.9383775 66.7656273,2.52237754 90.7176273,2.52237754 C114.664627,2.52237754 134.080627,21.9383775 134.080627,45.8893775 Z M141.928627,70.4913775 C132.577627,92.5403775 107.124627,102.835378 85.0736273,93.4873775 C63.0246273,84.1353775 52.7286273,58.6823775 62.0756273,36.6343775 C71.4276273,14.5813775 96.8806273,4.28837754 118.932627,13.6353775 C140.982627,22.9873775 151.275627,48.4383775 141.928627,70.4913775 Z M139.548627,96.2043775 C122.331627,112.852378 94.8806273,112.395378 78.2286273,95.1803775 C61.5776273,77.9663775 62.0356273,50.5123775 79.2496273,33.8623775 C96.4646273,17.2123775 123.920627,17.6673775 140.571627,34.8843775 C157.221627,52.0953775 156.764627,79.5503775 139.548627,96.2043775 Z M127.320627,118.944378 C104.972627,127.555378 79.8756273,116.417378 71.2666273,94.0673775 C62.6546273,71.7193775 73.7946273,46.6203775 96.1426273,38.0103775 C118.492627,29.4013775 143.589627,40.5403775 152.200627,62.8913775 C160.810627,85.2373775 149.670627,110.337378 127.320627,118.944378 Z M107.183627,135.112378 C83.2496273,134.313378 64.4916273,114.262378 65.2896273,90.3233775 C66.0856273,66.3893775 86.1386273,47.6303775 110.073627,48.4283775 C134.011627,49.2253775 152.769627,69.2753775 151.972627,93.2143775 C151.174627,117.153378 131.122627,135.909378 107.183627,135.112378 Z M82.3366273,142.135378 C60.6126273,132.057378 51.1696273,106.272378 61.2476273,84.5463775 C71.3266273,62.8193775 97.1116273,53.3803775 118.835627,63.4563775 C140.562627,73.5363775 150.003627,99.3173775 139.925627,121.046378 C129.846627,142.770378 104.062627,152.214378 82.3366273,142.135378 Z M56.7166273,138.900378 C40.6506273,121.139378 42.0236273,93.7143775 59.7826273,77.6473775 C77.5446273,61.5813775 104.966627,62.9523775 121.034627,80.7133775 C137.104627,98.4753775 135.732627,125.897378 117.972627,141.966378 C100.208627,158.032378 72.7866273,156.660378 56.7166273,138.900378 Z M34.3946273,125.921378 C26.5346273,103.298378 38.5036273,78.5873775 61.1266273,70.7273775 C83.7516273,62.8643775 108.460627,74.8353775 116.323627,97.4563775 C124.181627,120.081378 112.214627,144.792378 89.5906273,152.654378 C66.9666273,160.514378 42.2556273,148.546378 34.3946273,125.921378 Z M18.9086273,105.259378 C20.5036273,81.3623775 41.1706273,63.2843775 65.0666273,64.8783775 C88.9626273,66.4733775 107.042627,87.1373775 105.447627,111.034378 C103.853627,134.932378 83.1866273,153.010378 59.2906273,151.416378 C35.3946273,149.821378 17.3146273,129.156378 18.9086273,105.259378 Z M12.7186273,80.1903775 C23.5136273,58.8133775 49.5976273,50.2333775 70.9786273,61.0303775 C92.3556273,71.8273775 100.931627,97.9113775 90.1366273,119.290378 C79.3386273,140.667378 53.2556273,149.245378 31.8766273,138.449378 C10.4976273,127.651378 1.92162726,101.570378 12.7186273,80.1903775 Z M16.8046273,54.6923775 C35.0896273,39.2273775 62.4516273,41.5103775 77.9196273,59.7963775 C93.3866273,78.0833775 91.1016273,105.446378 72.8176273,120.913378 C54.5306273,136.381378 27.1676273,134.094378 11.6986273,115.809378 C-3.76537274,97.5233775 -1.48237274,70.1613775 16.8046273,54.6923775 Z M30.5196273,32.8153775 C53.3916273,25.7143775 77.6916273,38.4953775 84.7946273,61.3683775 C91.8936273,84.2453775 79.1106273,108.542378 56.2376273,115.645378 C33.3646273,122.747378 9.06662726,109.964378 1.96062726,87.0913775 C-5.13837274,64.2163775 7.64662726,39.9193775 30.5196273,32.8153775 Z M51.6876273,18.0253775 C75.5176273,20.4153775 92.8986273,41.6733775 90.5096273,65.5013775 C88.1186273,89.3353775 66.8616273,106.716378 43.0296273,104.323378 C19.1986273,101.932378 1.81862726,80.6783775 4.20762726,56.8483775 C6.59962726,33.0153775 27.8556273,15.6373775 51.6876273,18.0253775 Z M76.9486273,12.6753775 C97.9526273,24.1763775 105.655627,50.5323775 94.1556273,71.5383775 C82.6506273,92.5463775 56.2966273,100.248378 35.2886273,88.7453775 C14.2846273,77.2413775 6.57762726,50.8873775 18.0806273,29.8823775 C29.5856273,8.87237754 55.9396273,1.17137754 76.9486273,12.6753775 Z M99.2886273,16.7143775 C114.927627,34.8483775 112.902627,62.2333775 94.7656273,77.8723775 C76.6216273,93.5123775 49.2396273,91.4833775 33.6026273,73.3463775 C17.9616273,55.2083775 19.9876273,27.8253775 38.1246273,12.1843775 C56.2676273,-3.45562246 83.6486273,-1.42662246 99.2886273,16.7143775 Z M119.263627,28.6813775 C127.376627,51.2103775 115.695627,76.0593775 93.1596273,84.1763775 C70.6246273,92.2923775 45.7816273,80.6063775 37.6626273,58.0753775 C29.5466273,35.5443775 41.2306273,10.6983775 63.7626273,2.57737754 C86.2976273,-5.53762246 111.139627,6.14737754 119.263627,28.6813775 Z"
          id="Stroke-81"
        />
      </React.Fragment>
    ),
    viewBox: '0 0 157 157',
  },
  sacredFlower: {
    shape: (
      <React.Fragment>
        <path
          d="M105.827,44.253 C105.827,68.695 97.684,88.507 87.636,88.507 C77.59,88.507 69.441,68.695 69.441,44.253 C69.441,19.813 87.636,0 87.636,0 C87.636,0 105.827,19.813 105.827,44.253 Z M117.553,51.166 C110.673,74.618 97.276,91.339 87.636,88.507 C77.992,85.676 75.758,64.37 82.642,40.923 C89.522,17.468 112.56,3.582 112.56,3.582 C112.56,3.582 124.435,27.715 117.553,51.166 Z M126.857,61.105 C113.649,81.668 96.089,93.939 87.636,88.507 C79.181,83.075 83.034,62.006 96.242,41.439 C109.452,20.875 135.465,14.036 135.465,14.036 C135.465,14.036 140.066,40.538 126.857,61.105 Z M132.986,73.259 C114.525,89.271 94.222,96.097 87.636,88.507 C81.052,80.918 90.684,61.782 109.148,45.768 C127.614,29.755 154.501,30.518 154.501,30.518 C154.501,30.518 151.451,57.243 132.986,73.259 Z M135.445,86.645 C113.219,96.812 91.816,97.644 87.636,88.507 C83.457,79.368 98.087,63.722 120.313,53.556 C142.538,43.386 168.125,51.693 168.125,51.693 C168.125,51.693 157.673,76.48 135.445,86.645 Z M134.035,100.183 C109.846,103.679 89.074,98.45 87.636,88.507 C86.198,78.561 104.643,67.669 128.833,64.172 C153.023,60.676 175.234,75.85 175.234,75.85 C175.234,75.85 158.225,96.689 134.035,100.183 Z M128.869,112.778 C104.676,109.318 86.216,98.454 87.636,88.507 C89.057,78.557 109.821,73.3 134.019,76.759 C158.213,80.216 175.252,101.029 175.252,101.029 C175.252,101.029 153.065,116.234 128.869,112.778 Z M120.368,123.406 C98.126,113.276 83.472,97.65 87.636,88.507 C91.802,79.359 113.206,80.162 135.449,90.292 C157.692,100.426 168.182,125.195 168.182,125.195 C168.182,125.195 142.609,133.536 120.368,123.406 Z M109.215,131.211 C90.725,115.228 81.063,96.109 87.636,88.507 C94.209,80.905 114.523,87.7 133.011,103.688 C151.501,119.671 154.592,146.391 154.592,146.391 C154.592,146.391 127.704,147.194 109.215,131.211 Z M96.317,135.56 C83.074,115.018 79.192,93.951 87.636,88.507 C96.081,83.064 113.661,95.302 126.899,115.85 C140.14,136.392 135.583,162.901 135.583,162.901 C135.583,162.901 109.557,156.104 96.317,135.56 Z M82.715,136.1 C75.794,112.661 78.001,91.351 87.636,88.507 C97.274,85.659 110.693,102.356 117.612,125.8 C124.53,149.239 112.691,173.396 112.691,173.396 C112.691,173.396 89.635,159.543 82.715,136.1 Z M69.511,132.789 C69.474,108.349 77.59,88.523 87.636,88.507 C97.686,88.491 105.858,108.292 105.899,132.729 C105.937,157.174 87.775,177.015 87.775,177.015 C87.775,177.015 69.551,157.23 69.511,132.789 Z M57.777,125.894 C64.618,102.43 77.991,85.696 87.636,88.507 C97.282,91.318 99.552,112.62 92.704,136.083 C85.859,159.547 62.846,173.469 62.846,173.469 C62.846,173.469 50.931,149.356 57.777,125.894 Z M48.457,115.971 C61.631,95.387 79.174,83.091 87.636,88.507 C96.097,93.924 92.279,115.001 79.1,135.584 C65.924,156.172 39.922,163.051 39.922,163.051 C39.922,163.051 35.281,136.559 48.457,115.971 Z M42.307,103.829 C60.748,87.785 81.044,80.926 87.636,88.507 C94.23,96.089 84.632,115.236 66.19,131.276 C47.751,147.32 20.862,146.598 20.862,146.598 C20.862,146.598 23.869,119.868 42.307,103.829 Z M39.83,90.441 C62.04,80.244 83.443,79.376 87.636,88.507 C91.83,97.634 77.222,113.31 55.014,123.508 C32.802,133.706 7.205,125.447 7.205,125.447 C7.205,125.447 17.617,100.645 39.83,90.441 Z M41.218,76.9 C65.401,73.368 86.183,78.564 87.636,88.507 C89.088,98.45 70.661,109.37 46.479,112.904 C22.293,116.437 0.057,101.302 0.057,101.302 C0.057,101.302 17.034,80.435 41.218,76.9 Z M46.364,64.301 C70.565,67.721 89.041,78.557 87.636,88.507 C86.23,98.454 65.472,103.748 41.273,100.328 C17.071,96.908 0,76.122 0,76.122 C0,76.122 22.164,60.878 46.364,64.301 Z M54.852,53.661 C77.111,63.754 91.785,79.356 87.636,88.507 C83.486,97.658 62.077,96.889 39.821,86.792 C17.559,76.698 7.033,51.945 7.033,51.945 C7.033,51.945 32.592,43.564 54.852,53.661 Z M65.991,45.836 C84.506,61.79 94.195,80.897 87.636,88.507 C81.076,96.118 60.75,89.352 42.238,73.397 C23.723,57.441 20.59,30.726 20.59,30.726 C20.59,30.726 47.475,29.877 65.991,45.836 Z M78.884,41.467 C92.155,61.989 96.074,83.052 87.636,88.507 C79.198,93.964 61.6,81.748 48.329,61.227 C35.055,40.699 39.575,14.186 39.575,14.186 C39.575,14.186 65.612,20.944 78.884,41.467 Z M92.481,40.907 C99.438,64.339 97.268,85.647 87.636,88.507 C78.003,91.367 64.558,74.69 57.602,51.263 C50.645,27.829 62.448,3.66 62.448,3.66 C62.448,3.66 85.528,17.476 92.481,40.907 Z"
          id="Stroke-78"
        />
      </React.Fragment>
    ),
    viewBox: '0 0 177 178',
  },
  sacredTriangleSpiral: {
    shape: (
      <React.Fragment>
        <path
          d="M0,139.078 L80.296,0 L160.591,139.078 L0,139.078 Z M16.002,111.477 L96.037,27.859 L128.434,138.981 L16.002,111.477 Z M40.8,85.555 L106.172,62.173 L93.735,130.475 L40.8,85.555 Z M56.165,80.367 L103.162,78.188 L81.55,119.982 L56.165,80.367 Z M71.065,79.599 L96.343,91.249 L73.62,107.315 L71.065,79.599 Z M78.594,83.19 L89.488,96.137 L72.838,99.135 L78.594,83.19 Z M81.842,87.156 L84.452,97.047 L74.573,94.386 L81.842,87.156 Z"
          id="Stroke-74"
        />
      </React.Fragment>
    ),
    viewBox: '0 0 162 140',
  },
  sacredTriangleLines: {
    shape: (
      <React.Fragment>
        <path
          d="M0.056,145.668 L87.054,9.837 M0.111,145.639 L92.111,18.653 M0.083,145.613 L98.99,30.924 M0.111,145.639 L106.619,44.437 M0.111,145.639 L115.075,59.526 M0.22,145.694 L125.439,78.015 M0.111,145.668 L136.632,97.995 M0,145.639 L152.219,125.687 M81.718,0 L81.747,0 L0.028,145.668 M163.548,145.668 L76.55,9.837 M163.493,145.639 L71.492,18.653 M163.522,145.613 L64.613,30.924 M163.493,145.639 L56.985,44.437 M163.493,145.639 L48.529,59.526 M163.383,145.694 L38.165,78.015 M163.493,145.668 L26.973,97.995 M163.605,145.639 L11.386,125.687 M81.888,0 L81.859,0 L163.577,145.668"
          id="Stroke-76"
        />
      </React.Fragment>
    ),
    viewBox: '0 0 165 148',
  },
};

const SVG = ({ stroke, fill, width, icon, left, top, className }) => (
  <Wrapper
    viewBox={icons[icon].viewBox}
    stroke={stroke}
    fill={fill}
    svgWidth={twWidth[`${width}`]}
    left={left}
    top={top}
    className={className}
  >
    {icons[icon].shape}
  </Wrapper>
);

export default SVG;

SVG.propTypes = {
  stroke: PropTypes.string,
  fill: PropTypes.string,
  width: PropTypes.number,
  icon: PropTypes.oneOf([
    'triangle',
    'circle',
    'arrowUp',
    'upDown',
    'box',
    'hexa',
    'merkabah',
    'flowerOfLife',
    'sacredFlower',
    'sacredTriangleSpiral',
    'sacredTriangleLines',
  ]).isRequired,
  left: PropTypes.string,
  top: PropTypes.string,
  className: PropTypes.string,
};

SVG.defaultProps = {
  stroke: 'transparent',
  width: 8,
  fill: 'none',
  left: '0%',
  top: '0%',
  className: 'fancy-icon',
};
